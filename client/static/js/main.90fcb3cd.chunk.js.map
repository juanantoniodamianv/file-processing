{"version":3,"sources":["Table.js","App.js","serviceWorker.js","index.js"],"names":["$","require","DataTable","columns","title","Table","state","error","isLoaded","items","getRegisters","a","axios","get","setState","data","response","this","find","destroy","map","marca_temporal","apellido_y_nombre","numero_de_documento","obra_social","numero_de_afiliado","medico_anestesista","form_response_edit_url","$el","el","searchPanes","cascadePanes","dom","ordering","responsive","language","search","message","className","style","width","ref","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"0TAEMA,EAAIC,EAAQ,GAClBD,EAAEE,UAAYD,EAAQ,IAEtB,IAAME,EAAU,CACd,CACEC,MAAO,SAET,CACEA,MAAO,qBAET,CACEA,MAAO,sBAET,CACEA,MAAO,eAET,CACEA,MAAO,qBAET,CACEA,MAAO,yBAET,CACEA,MAAO,KAIEC,EAAb,4MAEEC,MAAQ,CACNC,MAAO,KACPC,UAAU,EACVC,MAAO,IALX,EAwCEC,aAxCF,sBAwCiB,4BAAAC,EAAA,+EAEOC,IAAMC,IAAI,qBAFjB,OAEPJ,EAFO,OAGX,EAAKK,SAAS,CACZN,UAAU,EACVC,MAAOA,EAAMM,KAAKC,WALT,gDAQX,EAAKF,SAAS,CACZN,UAAU,EACVD,MAAK,OAVI,yDAxCjB,kEAUIU,KAAKP,iBAVT,6CAcIV,EAAE,uBACCkB,KAAK,SACLhB,YACAiB,SAAQ,KAjBf,2CAqBI,IAAIJ,EAAOE,KAAKX,MAAMG,MAAMW,KAAI,gBAAEC,EAAF,EAAEA,eAAgBC,EAAlB,EAAkBA,kBAAmBC,EAArC,EAAqCA,oBAAqBC,EAA1D,EAA0DA,YAAaC,EAAvE,EAAuEA,mBAAoBC,EAA3F,EAA2FA,mBAAoBC,EAA/G,EAA+GA,uBAA/G,MAC9B,CAACN,EAAgBC,EAAmBC,EAAqBC,EAAaC,EAAoBC,EAA1F,mBAA0HC,EAA1H,4CAEFV,KAAKW,IAAM5B,EAAEiB,KAAKY,IAClBZ,KAAKW,IAAI1B,UAAU,CACjB4B,YAAY,CACVC,cAAc,GAEhBC,IAAK,2BACLjB,OACAZ,UACA8B,UAAU,EACVC,YAAY,EACZC,SAAU,CACRC,OAAQ,cAnChB,+BAuDY,IAAD,SACqBnB,KAAKX,MAAzBC,EADD,EACCA,MAAOC,EADR,EACQA,SACf,OAAID,EACK,uCAAaA,EAAM8B,SAChB7B,EAGH,2BAAO8B,UAAU,0DAA0DC,MAAO,CAACC,MAAM,QAASC,IAAM,SAAAZ,GAAE,OAAI,EAAKA,GAAIA,KAFvH,gDA5Db,GAA2Ba,aCXZC,MAdf,WAEE,OACE,yBAAKL,UAAU,OACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,eAAf,6CACA,yBAAKA,UAAU,aACb,kBAAC,EAAD,U,kBCCUM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArD,GACLsD,QAAQtD,MAAMA,EAAM8B,c","file":"static/js/main.90fcb3cd.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nconst $ = require('jquery');\n$.DataTable = require('datatables.net-responsive');\n\nconst columns = [\n  { \n    title: 'Fecha',\n  },\n  { \n    title: 'Apellido y Nombre',\n  },\n  { \n    title: 'N° de Documento',\n  },\n  { \n    title: 'Obra Social',\n  },\n  { \n    title: 'N° de Afiliado',\n  },\n  { \n    title: 'Médico Anestesista',\n  },\n  {\n    title: ''\n  }\n];\n\nexport class Table extends Component { \n\n  state = {\n    error: null,\n    isLoaded: false,\n    items: []\n  };\n\n  \n  componentDidMount() {\n    this.getRegisters();\n  }\n  \n  componentWillUnmount(){\n    $('.data-table-wrapper')\n      .find('table')\n      .DataTable()\n      .destroy(true);\n  }\n\n  componentDidUpdate(){\n    let data = this.state.items.map(({marca_temporal, apellido_y_nombre, numero_de_documento, obra_social, numero_de_afiliado, medico_anestesista, form_response_edit_url}) =>\n      [marca_temporal, apellido_y_nombre, numero_de_documento, obra_social, numero_de_afiliado, medico_anestesista, `<a href=\"${form_response_edit_url}\" target=\"_blank\">Ver Formulario</a>`]\n    )\n    this.$el = $(this.el)\n    this.$el.DataTable({\n      searchPanes:{\n        cascadePanes: true\n      },\n      dom: '<\"data-table-wrapper\"ft>',\n      data,\n      columns,\n      ordering: false,\n      responsive: true,\n      language: {\n        search: 'Buscar'\n      }\n    })\n  }\n\n  getRegisters = async () => {\n    try {\n      let items = await axios.get('/api/Spreadsheets')\n      this.setState({ \n        isLoaded: true,\n        items: items.data.response\n      })\n    } catch (error) {\n      this.setState({ \n        isLoaded: true,\n        error\n      })\n    }\n  }\n\n  render() {\n    const { error, isLoaded } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Cargando...</div>;\n    } else {\n      return <table className=\"table table-striped table-bordered dt-responsive nowrap\" style={{width:'100%'}} ref={ el => this.el= el }></table>;\n    }\n  }\n}","import React from 'react';\nimport './App.css';\nimport {Table} from \"./Table\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <div className=\"card border-light mb-3\">\n        <div className=\"card-header\">Consulta Preanestesista - Ficha Pacientes</div>\n        <div className=\"card-body\">\n          <Table />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}