{"version":3,"sources":["Table.js","App.js","serviceWorker.js","index.js"],"names":["columns","title","searchable","orderable","responsivePriority","Table","state","error","isLoaded","items","linkActions","url","getRegisters","a","axios","get","setState","data","response","toClipboard","navigator","clipboard","writeText","document","getElementById","refreshTooltip","this","$","find","DataTable","destroy","map","fecha","apellido_y_nombre","numero_de_documento","obra_social","numero_de_afiliado","medico_anestesista","form_response_edit_url","form_response_edit_url_m","$el","el","dom","ordering","responsive","language","search","zeroRecords","initComplete","style","display","api","every","column","select","appendTo","on","val","fn","dataTable","util","escapeRegex","draw","unique","sort","each","d","j","append","message","className","id","type","data-toggle","onMouseOut","bind","onClick","href","class","target","data-order","width","ref","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.2a5fa8ff.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport $ from 'jquery';\n\nimport 'datatables.net'\nimport 'datatables.net-responsive'\n//import 'datatables.net-searchpanes/js/dataTables.searchPanes'\n\nconst columns = [\n  { \n    title: 'Fecha',\n    searchable: false,\n    orderable: true\n  },\n  { \n    title: 'Apellido y Nombre',\n    searchable: true,\n    orderable: true\n  },\n  { \n    title: 'N° de Documento',\n    searchable: true,\n    orderable: true\n  },\n  { \n    title: 'Obra Social',\n    searchable: false,\n    orderable: true\n  },\n  { \n    title: 'N° de Afiliado',\n    searchable: false,\n    orderable: true\n  },\n  { \n    title: 'Médico Anestesista',\n    searchable: true,\n    orderable: true\n  },\n  {\n    title: '',\n    searchable: false,\n    orderable: false,\n    responsivePriority: 1\n  }\n];\n\nexport class Table extends Component { \n\n  state = {\n    error: null,\n    isLoaded: false,\n    items: []\n  };\n\n  \n  componentDidMount() {\n    this.getRegisters();\n  }\n  \n  componentWillUnmount(){\n    $('.data-table-wrapper')\n      .find('table')\n      .DataTable()\n      .destroy(true);\n  }\n\n  componentDidUpdate(){\n    let data = this.state.items.map(({fecha, apellido_y_nombre, numero_de_documento, obra_social, numero_de_afiliado, medico_anestesista, form_response_edit_url, form_response_edit_url_m}) =>\n      [ fecha, \n        apellido_y_nombre, \n        numero_de_documento, \n        obra_social, \n        numero_de_afiliado, \n        medico_anestesista, \n        ` ${this.linkActions(form_response_edit_url, 'Formulario Paciente')}\n          ${this.linkActions(form_response_edit_url_m, 'Formulario Medico')}`]\n    )\n    this.$el = $(this.el)\n    this.$el.DataTable({\n      dom: '<\"data-table-wrapper\"ft>',\n      data,\n      columns,\n      ordering: true,\n      responsive: true,\n      language: {\n        search: 'Buscar Paciente',\n        zeroRecords: 'No se han encontrado resultados para tu búsqueda'\n      },\n      initComplete: function () {\n        document.getElementById('DataTables_Table_0').style.display = 'none'\n        document.getElementById('DataTables_Table_0_filter').style.display = 'none'\n        // eslint-disable-next-line\n        this.api().columns([5]).every( function () {\n            var column = this;\n            var select = $('<select><option value=\"\" disabled selected style=\"display:none;\"></option></select>')\n                .appendTo('#doctor_table_filter')\n                .on('change', function () {\n                  var val = $.fn.dataTable.util.escapeRegex($(this).val());\n                  column.search( val ? val : '', true, false ).draw();\n                  document.getElementById('DataTables_Table_0').style.display = 'table';\n                  document.getElementById('DataTables_Table_0_filter').style.display = 'block';\n                });\n            column.data().unique().sort().each( function ( d, j ) {\n                select.append( '<option value=\"'+d+'\">'+d+'</option>' )\n            });\n        });\n      }\n\n    })\n  }\n\n  linkActions = (url, title) => {\n    return url ? `<a href=\"${url}\" class=\"btn btn-sm btn-primary btn-block mb-1\" target=\"_blank\">${title}</a>` : ''\n  }\n\n  getRegisters = async () => {\n    try {\n      let items = await axios.get('/api/Spreadsheets')\n      this.setState({ \n        isLoaded: true,\n        items: items.data.response\n      })\n    } catch (error) {\n      this.setState({ \n        isLoaded: true,\n        error\n      })\n    }\n  }\n\n  toClipboard = () => {\n    navigator.clipboard.writeText(\"https://forms.gle/JRKHLXMjQtzLDQvW7\");\n    \n    let el = document.getElementById(\"btnToClipboard\");\n    el.title = \"URL copiada al portapapeles\";\n  }\n\n  refreshTooltip = () => {\n    let el = document.getElementById(\"btnToClipboard\");\n    el.title = \"Copiar URL\";\n  }\n\n  render() {\n    const { error, isLoaded } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Cargando...</div>;\n    } else {\n      return (\n        <div>\n          <div className=\"row\">\n            <div id=\"doctor_table_filter\">Seleccionar Médico </div>\n            <button type=\"button\" id=\"btnToClipboard\" className=\"btn btn-secondary btn-sm mt-0\" data-toggle=\"tooltip\" title=\"Copiar en el portapapeles la dirección de la pagina para mandar al paciente\" onMouseOut={this.refreshTooltip.bind(this)} onClick={this.toClipboard.bind(this)}>\n              Copiar URL Formulario Paciente\n            </button>\n            <a href=\"https://forms.gle/FqMpEQwLaFrX41TG6\" class=\"btn btn-secondary btn-sm mt-0 ml-1\" target=\"_blank\" title=\"Abrir el formulario del médico en otra pestaña del navegador\">Formulario del Médico</a>\n          </div>\n          <table data-order='[[ 0, \"desc\" ]]' className=\"table table-striped table-bordered dt-responsive nowrap\" style={{width:'100%'}} ref={ el => this.el= el }></table>\n        </div>\n      );\n    }\n  }\n}","import React from 'react';\nimport './App.css';\nimport {Table} from \"./Table\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <div className=\"card border-light mb-3\">\n        <div className=\"card-header\">Consulta Preanestésica - Ficha Pacientes</div>\n        <div className=\"card-body\">\n          <Table />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}